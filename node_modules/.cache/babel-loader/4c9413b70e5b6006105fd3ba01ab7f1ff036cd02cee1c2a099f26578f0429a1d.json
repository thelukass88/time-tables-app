{"ast":null,"code":"var _jsxFileName = \"/Users/lukeholliday/Documents/time-tables-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Quiz from './components/Quiz';\n// import Scoreboard from './components/Scoreboard';\nimport NumberPad from './components/NumberPad';\nimport NumberSelection from './components/NumberSelection'; // Make sure to import this\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [score, setScore] = useState(0);\n  const [question, setQuestion] = useState(null); // Start as null\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedNumbers, setSelectedNumbers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(6);\n  const [showScore, setShowScore] = useState(false);\n  const generateQuestion = useCallback(() => {\n    if (selectedNumbers.length === 0) return null; // Ensure there's a number to use\n    const num1 = selectedNumbers[Math.floor(Math.random() * selectedNumbers.length)];\n    const num2 = Math.floor(Math.random() * 12) + 1; // Questions up to 12\n    return {\n      num1,\n      num2,\n      answer: num1 * num2\n    };\n  }, [selectedNumbers]);\n  const handleAnswer = useCallback(() => {\n    // Check if user answer is correct\n    if (question && parseInt(userAnswer) === question.answer) {\n      setScore(prevScore => prevScore + 1);\n    }\n    setUserAnswer('');\n    setTimeLeft(6); // Reset time for next question\n\n    if (currentQuestionIndex < 24) {\n      // Assuming you want 25 questions (0-24)\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setQuestion(generateQuestion());\n    } else {\n      setShowScore(true); // Show score at the end\n    }\n  }, [question, userAnswer, currentQuestionIndex, generateQuestion]);\n  useEffect(() => {\n    if (showScore) return; // Don't start timer if showing score\n\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          handleAnswer(); // Call handleAnswer when time runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer); // Cleanup interval on unmount\n  }, [timeLeft, showScore, handleAnswer]);\n  useEffect(() => {\n    // Only generate the first question if selectedNumbers are set\n    if (selectedNumbers.length > 0) {\n      setQuestion(generateQuestion()); // Generate the first question after numbers are selected\n    }\n  }, [selectedNumbers, generateQuestion]);\n\n  // Function to start the quiz by setting selected numbers\n  const startQuiz = numbers => {\n    setSelectedNumbers(numbers);\n    setScore(0); // Reset score to 0\n    setCurrentQuestionIndex(0);\n    setShowScore(false); // Hide score initially\n    setTimeLeft(6);\n    setUserAnswer('');\n  };\n\n  // Number pad functions\n  function handleNumberClick(number) {\n    setUserAnswer(userAnswer + number); // Append the clicked number to the answer\n  }\n  function handleClear() {\n    setUserAnswer(''); // Clear the answer field\n  }\n  function handleDelete() {\n    setUserAnswer(userAnswer.slice(0, -1)); // Remove the last digit\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Times Tables Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Your Final Score: \", score, \" out of 25\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : selectedNumbers.length === 0 ? /*#__PURE__*/_jsxDEV(NumberSelection, {\n      onStart: startQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) // Show selection component if no numbers selected\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Quiz, {\n        question: question,\n        userAnswer: userAnswer,\n        setUserAnswer: setUserAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NumberPad, {\n        onNumberClick: handleNumberClick,\n        onClear: handleClear,\n        onDelete: handleDelete,\n        handleAnswer: handleAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timeLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MnVvrWW/SSuWHQZovgLADJhsOXY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Quiz","NumberPad","NumberSelection","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","score","setScore","question","setQuestion","userAnswer","setUserAnswer","selectedNumbers","setSelectedNumbers","currentQuestionIndex","setCurrentQuestionIndex","timeLeft","setTimeLeft","showScore","setShowScore","generateQuestion","length","num1","Math","floor","random","num2","answer","handleAnswer","parseInt","prevScore","prevIndex","timer","setInterval","prev","clearInterval","startQuiz","numbers","handleNumberClick","number","handleClear","handleDelete","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","onNumberClick","onClear","onDelete","_c","$RefreshReg$"],"sources":["/Users/lukeholliday/Documents/time-tables-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Quiz from './components/Quiz';\n// import Scoreboard from './components/Scoreboard';\nimport NumberPad from './components/NumberPad';\nimport NumberSelection from './components/NumberSelection'; // Make sure to import this\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [question, setQuestion] = useState(null); // Start as null\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedNumbers, setSelectedNumbers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(6);\n  const [showScore, setShowScore] = useState(false);\n\n  const generateQuestion = useCallback(() => {\n    if (selectedNumbers.length === 0) return null; // Ensure there's a number to use\n    const num1 = selectedNumbers[Math.floor(Math.random() * selectedNumbers.length)];\n    const num2 = Math.floor(Math.random() * 12) + 1; // Questions up to 12\n    return { num1, num2, answer: num1 * num2 };\n  }, [selectedNumbers]);\n\n  const handleAnswer = useCallback(() => {\n    // Check if user answer is correct\n    if (question && parseInt(userAnswer) === question.answer) {\n      setScore(prevScore => prevScore + 1);\n    }\n\n    setUserAnswer('');\n    setTimeLeft(6); // Reset time for next question\n\n    if (currentQuestionIndex < 24) { // Assuming you want 25 questions (0-24)\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setQuestion(generateQuestion());\n    } else {\n      setShowScore(true); // Show score at the end\n    }\n  }, [question, userAnswer, currentQuestionIndex, generateQuestion]);\n\n  useEffect(() => {\n    if (showScore) return; // Don't start timer if showing score\n\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          handleAnswer(); // Call handleAnswer when time runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer); // Cleanup interval on unmount\n  }, [timeLeft, showScore, handleAnswer]);\n\n  useEffect(() => {\n    // Only generate the first question if selectedNumbers are set\n    if (selectedNumbers.length > 0) {\n      setQuestion(generateQuestion()); // Generate the first question after numbers are selected\n    }\n  }, [selectedNumbers, generateQuestion]);\n\n  // Function to start the quiz by setting selected numbers\n  const startQuiz = (numbers) => {\n    setSelectedNumbers(numbers);\n    setScore(0); // Reset score to 0\n    setCurrentQuestionIndex(0);\n    setShowScore(false); // Hide score initially\n    setTimeLeft(6);\n    setUserAnswer('');\n  };\n\n  // Number pad functions\n  function handleNumberClick(number) {\n    setUserAnswer(userAnswer + number); // Append the clicked number to the answer\n  }\n\n  function handleClear() {\n    setUserAnswer(''); // Clear the answer field\n  }\n\n  function handleDelete() {\n    setUserAnswer(userAnswer.slice(0, -1)); // Remove the last digit\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Times Tables Quiz</h1>\n      {showScore ? (\n        <div>\n          <h2>Your Final Score: {score} out of 25</h2> {/* Show final score only here */}\n        </div>\n      ) : selectedNumbers.length === 0 ? (\n        <NumberSelection onStart={startQuiz} /> // Show selection component if no numbers selected\n      ) : (\n        <>\n          <Quiz\n            question={question}\n            userAnswer={userAnswer}\n            setUserAnswer={setUserAnswer}\n          />\n          <NumberPad \n            onNumberClick={handleNumberClick} \n            onClear={handleClear} \n            onDelete={handleDelete} \n            handleAnswer={handleAnswer}\n          />\n          <div>Time Left: {timeLeft}</div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}